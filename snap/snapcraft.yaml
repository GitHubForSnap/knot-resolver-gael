name: knot-resolver-gael 
base: core20
adopt-info: app
summary: Knot Resolver
description: |
  Knot Resolver is a caching full resolver implementation written in C and LuaJIT, both a resolver library and a daemon. The core architecture is tiny and efficient, and provides a foundation and a state-machine like API for extensions. There are three modules built-in - iterator, validator, cache, and a few more are loaded by default. Most of the rich features are written in Lua(JIT) and C. Batteries are included, but optional.
  The LuaJIT modules, support DNS privacy and DNSSEC, and persistent cache with low memory footprint make it a great personal DNS resolver or a research tool to tap into DNS data. TL;DR it's the OpenResty of DNS.
  Strong filtering rules, and auto-configuration with etcd make it a great large-scale resolver solution.
  The server adopts a different scaling strategy than the rest of the DNS recursors - no threading, shared-nothing architecture (except MVCC cache that may be shared) that allows you to pin instances on available CPU cores and grow by self-replication. You can start and stop additional nodes depending on the contention without downtime.
  It also has strong support for DNS over TCP, notably TCP Fast-Open, query pipelining and deduplication, and response reordering.

grade: stable 
confinement: strict

architectures:
- build-on: [amd64]
  run-on: [amd64]

license: "GPL-3.0"

apps:
  kresd:
    environment:
      HOME: ${SNAP_USER_COMMON}
      XDG_CONFIG_HOME: ${SNAP_USER_COMMON}
    plugs:
    - home
    - network
    - network-bind
    - removable-media

parts:
  app:
    plugin: dump
    source: https://download.opensuse.org/repositories/home:/CZ-NIC:/knot-resolver-latest/xUbuntu_20.04/amd64/knot-resolver_5.3.0-cznic.1_amd64.deb
    source-type: deb
    override-build: |
      COUNT=1
      VERSION=5.3.0+snap1
      ARCH=amd64
      echo "Building Knot Resolver..."
      echo "VERSION: ${VERSION}"
      echo "ARCH   : ${ARCH}"
      echo "-----------------------"
      snapcraftctl set-version "${VERSION}"
      snapcraftctl build

  # This part removes all the files in this snap which already exist in
  # connected content and base snaps. Since these files will be available
  # at runtime from the content and base snaps, they do not need to be
  # included in this snap itself.
  #
  # More info: https://forum.snapcraft.io/t/reducing-the-size-of-desktop-snaps/17280#heading--cleanup-part
  #
  cleanup:
    after:  # Make this part run last; list all your other parts here
      - app
    plugin: nil
    build-snaps:  # List all content-snaps and base snaps you're using here
      - core20
    override-prime: |
      set -eux
      for snap in "core20"; do  # List all content-snaps and base snaps you're using here
          cd "/snap/$snap/current" && find . -type f,l -exec rm -f "$SNAPCRAFT_PRIME/{}" \;
      done

